{"version":3,"sources":["PP.js","Landing.js","App.js","serviceWorker.js","index.js"],"names":["PP","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onButtonClick","data","script","state","value","language","versionIndex","clientId","clientSecret","stdin","fetch","method","mode","cache","credentials","headers","Content-Type","redirect","referrer","body","JSON","stringify","then","res","json","setState","output","_this2","console","log","react_default","a","createElement","class","style","paddingTop","href","width","rows","onChange","event","target","onClick","React","Component","Landing","id","height","textAlign","position","top","left","marginRight","transform","App","BrowserRouter","Fragment","type","name","for","Route","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.972041f2.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass PP extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            value: '',\r\n            res: { output: 'Nu a fost nimic compilat inca!' }\r\n        }\r\n    }\r\n    onButtonClick = () => {\r\n        let data = {\r\n            script: this.state.value,\r\n            language: \"cpp\",\r\n            versionIndex: \"3\",\r\n            clientId: \"3ab058b2c56e83895ea733b3e0449bf5\",\r\n            clientSecret: \"9f0db5c8938a159a2a11dfb279ea32152c3a0ad715a2c201441a3b347f90fcb0\",\r\n            stdin:\"5 5 2 1 2 5 1 3 2 4 5 1 4\"\r\n        }\r\n        fetch('https://api.jdoodle.com/v1/execute', {\r\n            method: \"POST\", // *GET, POST, PUT, DELETE, etc.\r\n            mode: \"cors\", // no-cors, cors, *same-origin\r\n            cache: \"no-cache\", // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: \"same-origin\", // include, *same-origin, omit\r\n            headers: {\r\n                \"Content-Type\": \"application/json; charset=utf-8\",\r\n            },\r\n            redirect: \"follow\", // manual, *follow, error\r\n            referrer: \"no-referrer\", // no-referrer, *client\r\n            body: JSON.stringify(data)\r\n        }\r\n        ).then(res => res.json())\r\n            .then(res => this.setState({ res }))\r\n    }\r\n    render() {console.log(this.state.res.output)\r\n        return (\r\n            <article class=\"article\" style={{ paddingTop: 20 }}>\r\n                <h1 class=\"article-title\"><a href=\"\">Facebook_FMI</a></h1>\r\n                <p class=\"article-meta\">Scrisa de <a href=\"#\">Vlad Romila</a></p>\r\n                <p class=\"text-lead\">\r\n                    Ionuț tocmai a terminat liceul și susține examenul de admitere la facultate. Știind că s-a pregătit foarte bine pentru examen, el dorește să își anunțe reușita după examen printr-o postare pe Facebook.\r\n                    Ionuț cunoaște n utilizatori reprezentați de numerele de la 1 la n, între care există m relații de prietenie de forma i j, unde i și j sunt utilizatori, iar n și m sunt numere naturale nenule. Un utilizator nu poate fi prieten cu el însuși, iar o relație de prietenie între doi utilizatori ne spune că fiecare dintre ei este prieten cu celălalt.\r\nÎntrucât dorește ca postarea lui să fie cât mai răspândită, Ionuț vrea să afle care sunt utilizatorii cei mai bine conectați din mulțimea sa de cunoscuți, pentru ca eventual să le ceară prietenia. Pentru aceasta, Ionuț trebuie să găsească cea mai mare submulțime de utilizatori cunoscuți, în care fiecare utilizator din această submulțime are cel puțin k prieteni aflați la rândul lor în submulțime, unde k este un număr natural nenul.</p>\r\n                <h3 class=\"article-title\"><a href=\"\">Cerinta</a></h3>\r\n                <p class=\"text-lead\">\r\n                    Ajutați-l pe Ionuț să se determine și să se afișeze, printr-o soluție de complexitate timp cât mai bună, în funcție de datele de intrare, membrii celei mai mari submulțimi de utilizatori, cu proprietatea că fiecare utilizator din această submulțime are cel puțin k prieteni aflați la rândul lor în submulțime.\r\n                </p>\r\n                <h3 class=\"article-title\"><a href=\"\">Date de intrare</a></h3>\r\n                <p class=\"text-lead\">\r\n                    Fișierul de intrare fb_fmi.in conține pe prima linie numerele n, m și k, separate prin spațiu, iar pe a doua linie 2•m numere naturale cuprinse între 1 și n, separate prin spațiu, reprezentând în ordine cele m relații de prietenie între cei n utilizatori.\r\n                </p>\r\n                <h3 class=\"article-title\"><a href=\"\">Date de iesire</a></h3>\r\n                <p class=\"text-lead\">\r\n                    Fișierul de ieșire fb_fmi.out va conține pe prima linie numărul natural Q ce reprezintă numărul maxim de membrii ai submulțimii de utilizatori care au cel puțin k prieteni, aflați la rândul lor în submulțime.\r\n    Pe următoarea linie, în ordine crescătoare, sunt enumerați utilizatori submulțimii. În cazul în care nu există o astfel de submulțime pentru k dat, în fișier se va scrie valoarea 0.\r\n                </p>\r\n                <textarea style={{ width: '100%' }} rows={15}\r\n                value={this.state.value}\r\n                onChange={(event) => this.setState({ value: event.target.value })}\r\n                ></textarea>\r\n                <div class=\"col-12 col\">\r\n                    <button class=\"btn-block\" onClick={this.onButtonClick}>Trimite</button>\r\n                </div>\r\n                <h3 class=\"article-title\"><a href=\"\">Date de iesire</a></h3>\r\n                <div class=\"sm-3 col border border-primary\">{this.state.res.output}</div>\r\n            </article>\r\n        )\r\n    }\r\n}\r\nexport default PP;","import React from 'react';\r\n\r\nconst Landing = () => {\r\n    return (\r\n            <div id=\"landingdiv\" style={{ width: '100%', height: '100%', textAlign: 'center' }}>\r\n                <h1 style={{\r\n                    position: 'absolute',\r\n                    top: '30%',\r\n                    left: '50%',\r\n                    marginRight: '-50%',\r\n                    transform: 'translate(-50%, -50%)'\r\n                }}>Teoria grafurilor</h1>\r\n            </div>\r\n\r\n    )\r\n}\r\nexport default Landing","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport PP from './PP.js';\nimport Landing from './Landing.js';\nimport { Nav, Navbar, MenuItem, NavItem, NavDropdown, FormGroup, FormControl, Button } from 'react-bootstrap'\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <React.Fragment>\n          <nav class=\"border fixed split-nav\">\n  <div class=\"nav-brand\">\n    <h3><a href=\"/1\">Grafuri</a></h3>\n  </div>\n  <div class=\"collapsible\">\n    <input id=\"collapsible1\" type=\"checkbox\" name=\"collapsible1\"/>\n    <button>\n    <label for=\"collapsible1\">\n        <div class=\"bar1\"></div>\n        <div class=\"bar2\"></div>\n        <div class=\"bar3\"></div>\n      </label>\n    </button>\n    <div class=\"collapsible-body\">\n      <ul class=\"inline\">\n        <li><a href=\"#\">Documentation</a></li>\n        <li><a href=\"#\">About</a></li>\n        <li><a href=\"#\">Github</a></li>\n      </ul>\n    </div>\n  </div>\n</nav>\n          <Route path=\"/\" exact component={Landing} />\n          <Route path=\"/post/:handle\" exact component={PP} /></React.Fragment>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}